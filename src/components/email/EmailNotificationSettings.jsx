import { useState, useEffect } from 'react';
import axiosInstance from '../../services/axiosInstance';
import { Container, Row, Col } from 'react-bootstrap';

// Import child components
import NotificationSettings from './NotificationSettings';
import EmailVerification from './EmailVerification';

// --- Constants ---
const policyOptions = [
  { value: 'NEW_TICKET', label: '–ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö' },
  { value: 'NEW_MESSAGE', label: '–ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö' },
  { value: 'NEW_SYSTEM_MESSAGE', label: '–ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö' },
  { value: 'NEW_TICKET_OR_MESSAGE', label: '–ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö' },
  { value: 'CHANGE_TICKET', label: '–ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∑–∞—è–≤–∫–∏ (—Å—Ç–∞—Ç—É—Å, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)' },
  { value: 'NONE', label: '–ü–æ–ª—É—á–∞—Ç—å –≤—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è' },
];

const policyDescriptions = policyOptions.reduce((acc, cur) => {
  acc[cur.value] = cur.label;
  return acc;
}, {});

/**
 * Main component for managing email notification settings.
 * It holds the state and logic, and delegates rendering to child components.
 */
function EmailNotificationSettings() {
  // --- State Management ---
  const [currentLevel, setCurrentLevel] = useState(null);
  const [selectedPolicy, setSelectedPolicy] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [capId, setCapId] = useState('');
  const [capCode, setCapCode] = useState('');

  // Status messages
  const [status, setStatus] = useState('');
  const [verifyStatus, setVerifyStatus] = useState('');

  // Loading states
  const [loadingInfo, setLoadingInfo] = useState(true);
  const [loadingSave, setLoadingSave] = useState(false);
  const [loadingVerify, setLoadingVerify] = useState(false);

  // Resend code timer logic
  const [canResend, setCanResend] = useState(true);
  const [resendTimer, setResendTimer] = useState(0);

  // --- Effects ---
  useEffect(() => {
    const fetchMuteLevel = async () => {
      setLoadingInfo(true);
      try {
        const res = await axiosInstance.get('/api/v1/email/info');
        setCurrentLevel(res.data.muteLevel);
        setSelectedPolicy(res.data.muteLevel);
      } catch (err) {
        console.error('‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ muteLevel:', err);
        setStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
      } finally {
        setLoadingInfo(false);
      }
    };
    fetchMuteLevel();
  }, []);

  useEffect(() => {
    let timer;
    if (resendTimer > 0) {
      timer = setInterval(() => {
        setResendTimer((prev) => {
          if (prev <= 1) {
            clearInterval(timer);
            setCanResend(true);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(timer);
  }, [resendTimer]);

  // --- Handlers ---
  const handleSavePolicy = async (e) => {
    e.preventDefault();
    if (!selectedPolicy) {
      setStatus('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º');
      return;
    }
    setLoadingSave(true);
    setStatus('');
    try {
      const res = await axiosInstance.post(`/api/v1/email/notify-set?level=${selectedPolicy}`);
      if (res.data === '–£—Å–ø–µ—à–Ω–æ') {
        setStatus('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        setCurrentLevel(selectedPolicy);
      } else {
        setStatus(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${res.data}`);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', err);
      setStatus(
          <>
            ‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à–∞ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –ø—Ä–æ—Å—Ç–æ <a href="/login">–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</a>.
          </>
      );
    } finally {
      setLoadingSave(false);
    }
  };

  const handleVerifyEmail = async (e) => {
    e.preventDefault();
    const trimmedCode = verificationCode.trim();
    if (!trimmedCode) {
      setVerifyStatus('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞');
      return;
    }
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(trimmedCode)) {
      setVerifyStatus('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }
    setLoadingVerify(true);
    setVerifyStatus('');
    try {
      const res = await axiosInstance.get(`/api/v1/email/confirm?token=${trimmedCode}`);
      setVerifyStatus(res.data === '–£—Å–ø–µ—à–Ω–æ' ? '‚úÖ Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!' : `–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${res.data}`);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email:', err);
      setVerifyStatus('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email. –ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º.');
    } finally {
      setLoadingVerify(false);
    }
  };

  const handleResendCode = async () => {
    if (!canResend) return;
    if (!capId || !capCode.trim()) {
      setVerifyStatus('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ (CAPTCHA), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥.');
      return;
    }
    setCanResend(false);
    setVerifyStatus('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥...');
    setResendTimer(60);
    try {
      const res = await axiosInstance.get(`/api/v1/email/code?capId=${capId}&capCode=${encodeURIComponent(capCode)}`);
      setVerifyStatus(res.data === '–£—Å–ø–µ—à–Ω–æ' ? 'üì® –ù–æ–≤—ã–π –∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email.' : `C—Ç–∞—Ç—É—Å: ${res.data}`);
    } catch (err) {
      const errorMsg = err?.response?.data?.message || '‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
      setVerifyStatus(errorMsg);
      setCanResend(true);
      setResendTimer(0);
    } finally {
      setCapCode('');
    }
  };

  // --- Render ---
  return (
      <Container className="my-4 my-lg-5">
        <Row className="justify-content-center">
          <Col md={10} lg={9}>
            <div className="text-center mb-4">
              <h3 className="mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
            </div>

            <NotificationSettings
                loadingInfo={loadingInfo}
                currentLevel={currentLevel}
                policyDescriptions={policyDescriptions}
                selectedPolicy={selectedPolicy}
                setSelectedPolicy={setSelectedPolicy}
                handleSavePolicy={handleSavePolicy}
                loadingSave={loadingSave}
                policyOptions={policyOptions}
                status={status}
            />

            <EmailVerification
                verificationCode={verificationCode}
                setVerificationCode={setVerificationCode}
                handleVerifyEmail={handleVerifyEmail}
                loadingVerify={loadingVerify}
                setCapId={setCapId}
                capCode={capCode}
                setCapCode={setCapCode}
                handleResendCode={handleResendCode}
                canResend={canResend}
                resendTimer={resendTimer}
                verifyStatus={verifyStatus}
            />
          </Col>
        </Row>
      </Container>
  );
}

export default EmailNotificationSettings;
