import React, { useEffect, useState, useCallback } from 'react';
import { Container, Row, Col, Card, Spinner, Alert, Form, Button } from 'react-bootstrap';
import axiosInstance from '../../services/axiosInstance';
import { HOST } from '../../services/authService';
import Logout from "../auth/Logout";

function UserAccount() {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    const [profile, setProfile] = useState(null);
    const [formData, setFormData] = useState({
        firstName: '',
        lastName: '',
        middleName: '',
        additionalInfo: '',
    });
    const [loading, setLoading] = useState(true);
    const [updating, setUpdating] = useState(false);
    const [error, setError] = useState('');
    const [status, setStatus] = useState('');
    const [copied, setCopied] = useState(false);

    // --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Email –∏ CAPTCHA ---
    const [verificationCode, setVerificationCode] = useState('');
    const [capId, setCapId] = useState('');
    const [capCode, setCapCode] = useState('');
    const [verifyStatus, setVerifyStatus] = useState('');
    const [loadingVerify, setLoadingVerify] = useState(false);
    const [canResend, setCanResend] = useState(false); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ false, –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–º CAPTCHA
    const [resendTimer, setResendTimer] = useState(0);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π CAPTCHA
    const fetchCaptcha = useCallback(async () => {
        try {
            const res = await axiosInstance.get(`${HOST}/api/v1/captcha/get-new`);
            setCapId(res.data.id);
            // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ CAPTCHA, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            setCanResend(true);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ CAPTCHA:', err);
            setVerifyStatus('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å CAPTCHA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    }, []);

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ CAPTCHA –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        const fetchData = async () => {
            try {
                const res = await axiosInstance.get(`${HOST}/api/v1/user/profile`, { withCredentials: true });
                setProfile(res.data);
                setFormData({
                    firstName: res.data.firstName || '',
                    lastName: res.data.lastName || '',
                    middleName: res.data.middleName || '',
                    additionalInfo: res.data.additionalInfo || '',
                });
            } catch (err) {
                setError(
                    <>
                        ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à–∞ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü—Ä–æ—Å—Ç–æ <a href="/login">–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ</a>.
                    </>
                );
            } finally {
                setLoading(false);
            }
        };

        fetchData();
        fetchCaptcha(); // –ó–∞–≥—Ä—É–∂–∞–µ–º CAPTCHA —Å—Ä–∞–∑—É
    }, [fetchCaptcha]);

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
    useEffect(() => {
        let timer;
        if (resendTimer > 0) {
            timer = setInterval(() => {
                setResendTimer((prev) => {
                    if (prev <= 1) {
                        clearInterval(timer);
                        setCanResend(true);
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        }
        return () => clearInterval(timer);
    }, [resendTimer]);

    const handleChange = (e) => {
        setFormData(prev => ({
            ...prev,
            [e.target.name]: e.target.value,
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setUpdating(true);
        setStatus('');
        try {
            await axiosInstance.post('/api/v1/user/profile', formData);
            setStatus('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            setProfile(prev => ({
                ...prev,
                ...formData,
            }));
        } catch (err) {
            console.error('‚õî –û—à–∏–±–∫–∞:', err);
            setStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        } finally {
            setUpdating(false);
        }
    };

    const copyToClipboard = () => {
        // –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ iframe
        const el = document.createElement('textarea');
        el.value = profile.id;
        document.body.appendChild(el);
        el.select();
        document.execCommand('copy');
        document.body.removeChild(el);

        setCopied(true);
        setTimeout(() => setCopied(false), 1500);
    };

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Email –∏ CAPTCHA ---
    const handleVerifyEmail = async (e) => {
        e.preventDefault();
        const trimmedCode = verificationCode.trim();
        if (!trimmedCode) {
            setVerifyStatus('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞');
            return;
        }
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(trimmedCode)) {
            setVerifyStatus('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
        }
        setLoadingVerify(true);
        setVerifyStatus('');
        try {
            const res = await axiosInstance.get(`/api/v1/email/confirm?token=${trimmedCode}`);
            setVerifyStatus(res.data === '–£—Å–ø–µ—à–Ω–æ' ? '‚úÖ Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!' : `–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${res.data}`);
            if (res.data === '–£—Å–ø–µ—à–Ω–æ') {
                setProfile(prev => ({ ...prev, emailVerified: true }));
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email:', err);
            setVerifyStatus('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email. –ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º.');
        } finally {
            setLoadingVerify(false);
        }
    };

    const handleResendCode = async () => {
        if (!canResend) return;
        if (!capId || !capCode.trim()) {
            setVerifyStatus('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ (CAPTCHA), —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥.');
            return;
        }
        setCanResend(false);
        setVerifyStatus('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥...');
        setResendTimer(60);
        try {
            const res = await axiosInstance.get(`/api/v1/email/code?capId=${capId}&capCode=${encodeURIComponent(capCode)}`);
            setVerifyStatus(res.data === '–£—Å–ø–µ—à–Ω–æ' ? 'üì® –ù–æ–≤—ã–π –∫–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email.' : `‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${res.data}`);
            if (res.data !== '–£—Å–ø–µ—à–Ω–æ') {
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –¥–µ–ª–∞–µ–º CAPTCHA —Å–Ω–æ–≤–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –∏ –æ–±–Ω—É–ª—è–µ–º —Ç–∞–π–º–µ—Ä
                setCanResend(true);
                setResendTimer(0);
            }
        } catch (err) {
            const errorMsg = err?.response?.data?.message || '‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
            setVerifyStatus(errorMsg);
            setCanResend(true);
            setResendTimer(0);
        } finally {
            setCapCode('');
            fetchCaptcha(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é CAPTCHA –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }
    };

    if (loading) return <Spinner animation="border" className="d-block mx-auto mt-5" />;
    if (error) return <Alert variant="danger" className="mt-5 text-center">{error}</Alert>;

    return (
        <Container className="my-5">
            <Row>
                <Col md={6}>
                    <Card className="shadow mb-4 text-start">
                        <Card.Header className="bg-primary text-white">–ü—Ä–æ—Ñ–∏–ª—å</Card.Header>
                        <div className="mb-2 p-2 bg-light border rounded">
                            –í–Ω–∏–º–∞–Ω–∏–µ, –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã —É—Å–ª–æ–≤–Ω–æ - –¥–ª—è —Ü–µ–ª–µ–π –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
                        </div>
                        <Card.Body>
                            <div className="mb-2 p-2 bg-light border rounded">
                                <p><strong>–ò–º—è:</strong> {profile.firstName}</p>
                                <p><strong>–§–∞–º–∏–ª–∏—è:</strong> {profile.lastName}</p>
                                <p><strong>–û—Ç—á–µ—Å—Ç–≤–æ:</strong> {profile.middleName || '‚Äî'}</p>
                                <p><strong>–†–æ–ª—å:</strong> {profile.userRole}</p>
                            </div>
                            <div className="mb-2 p-2 bg-light border rounded">
                                <p><strong>Email:</strong> {profile.email}</p>
                                <p>
                                    <strong>Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:</strong>{' '}
                                    {profile.emailVerified ? '‚úÖ –î–∞' : (
                                        <>
                                            ‚ùå –ù–µ—Ç (
                                            <a href="/notify-settings">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</a>
                                            )
                                        </>
                                    )}
                                </p>

                            </div>
                            <div className="mb-2 p-2 bg-light border rounded d-flex justify-content-between align-items-center">
                                <div>
                                    <p><strong>–í–∞—à ID:</strong></p>
                                    <div style={{ whiteSpace: 'pre-wrap' }}>
                                        {profile.id}
                                    </div>
                                </div>
                                <button
                                    className="btn btn-outline-secondary btn-sm ms-2"
                                    onClick={copyToClipboard}
                                >
                                    üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                            </div>
                            <div className="mb-3">
                                <Logout></Logout>
                            </div>
                            {copied && <div className="text-success mt-2">ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!</div>}
                        </Card.Body>
                    </Card>
                </Col>

                <Col md={6}>
                    <Card className="shadow mb-4">
                        <Card.Header className="bg-success text-white">‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</Card.Header>
                        <div className="mb-2 p-2 bg-light border rounded">
                            –í—ã–¥—É–º–∞–π—Ç–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ö–∞—Ä–∞–Ω–¥–∞—à–∏–∫ –ü–µ—á–µ–Ω—é—à–∫–∏–Ω
                        </div>
                        <Card.Body>
                            <form onSubmit={handleSubmit}>
                                <div className="mb-3">
                                    <label className="form-label">–ò–º—è</label>
                                    <input
                                        type="text"
                                        name="firstName"
                                        value={formData.firstName}
                                        onChange={handleChange}
                                        className="form-control"
                                    />
                                </div>
                                <div className="mb-3">
                                    <label className="form-label">–§–∞–º–∏–ª–∏—è</label>
                                    <input
                                        type="text"
                                        name="lastName"
                                        value={formData.lastName}
                                        onChange={handleChange}
                                        className="form-control"
                                    />
                                </div>
                                <div className="mb-3">
                                    <label className="form-label">–û—Ç—á–µ—Å—Ç–≤–æ</label>
                                    <input
                                        type="text"
                                        name="middleName"
                                        value={formData.middleName}
                                        onChange={handleChange}
                                        className="form-control"
                                    />
                                </div>
                                <div className="mb-3">
                                    <label className="form-label">–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label>
                                    <textarea
                                        name="additionalInfo"
                                        value={formData.additionalInfo}
                                        onChange={handleChange}
                                        rows="3"
                                        className="form-control"
                                    />
                                </div>
                                <button type="submit" className="btn btn-success" disabled={updating}>
                                    {updating ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                                </button>
                            </form>
                            {status && <div className="mt-3 alert alert-info">{status}</div>}
                        </Card.Body>
                    </Card>
                </Col>
            </Row>
        </Container>
    );
}

export default UserAccount;
