import { useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import axiosInstance from '../../services/axiosInstance';

function CreateTicketForm() {
  const location = useLocation();
  const navigate = useNavigate();
  const searchParams = new URLSearchParams(location.search);
  const portalId = searchParams.get('portalId');

  const [title, setTitle] = useState('');
  const [body, setBody] = useState('');
  const [priority, setPriority] = useState('');
  const [accessStatus, setAccessStatus] = useState('CREATOR_AND_PORTAL_USERS');
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  const priorityLabels = {
    CRITICAL: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
    HIGH: '–í—ã—Å–æ–∫–∏–π',
    MEDIUM: '–°—Ä–µ–¥–Ω–∏–π',
    LOW: '–ù–∏–∑–∫–∏–π',
    NONE: '–ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞',
  };

  const priorities = Object.keys(priorityLabels);

  const accessStatusLabels = {
    ALL_USERS: '–î–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
    CREATOR_AND_PORTAL_USERS: '–¢–æ–ª—å–∫–æ –º–Ω–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Ä—Ç–∞–ª–∞',
  };

  const accessStatusOptions = Object.keys(accessStatusLabels);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');
    setError('');

    // üîí –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (title.length > 255) {
      setError('–¢–µ–º–∞ –∑–∞—è–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤');
      setLoading(false);
      return;
    }

    if (body.length > 8000) {
      setError('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 8000 —Å–∏–º–≤–æ–ª–æ–≤');
      setLoading(false);
      return;
    }

    try {
      const payload = {
        title,
        body,
        ticketAccessStatus: accessStatus
      };

      if (priority) {
        payload.ticketPriority = priority;
      }

      const res = await axiosInstance.post(`/api/v1/portals/${portalId}/ticket`, payload);
      const serverMessage = res.data.message || '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞';
      const match = serverMessage.match(/ID:\s*(\d+)/);
      const createdTicketId = match ? match[1] : null;

      if (createdTicketId) {
        setMessage(`‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID –∑–∞—è–≤–∫–∏: ${createdTicketId}`);
        setTimeout(() => {
          navigate(`/ticket-show/portal/${portalId}/ticket/${createdTicketId}`);

        }, 500);
      } else {
        setMessage(serverMessage);
      }

      setTitle('');
      setBody('');
      setPriority('');
      setAccessStatus('CREATOR_AND_PORTAL_USERS');
    } catch (err) {
      console.error('‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', err);
      if (err.response?.data?.message) {
        setError(err.response.data.message);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
      <div className="mt-4">
        <h4>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ—Ä—Ç–∞–ª–∞ {portalId ? `#${portalId}` : '(ID –Ω–µ –∑–∞–¥–∞–Ω)'}</h4>
        <form onSubmit={handleSubmit}>
          <div className="mb-3">
            <label className="form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
            <input
                type="text"
                className="form-control"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                required
                disabled={loading}
                maxLength={255}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞—è–≤–∫–∏ (–¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤)"
            />
            <small className="text-muted">{title.length}/255 —Å–∏–º–≤–æ–ª–æ–≤</small>
          </div>

          <div className="mb-3">
            <label className="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <textarea
                className="form-control"
                value={body}
                onChange={(e) => setBody(e.target.value)}
                rows={4}
                required
                disabled={loading}
                maxLength={8000}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–¥–æ 8000 —Å–∏–º–≤–æ–ª–æ–≤)"
            />
            <small className="text-muted">{body.length}/8000 —Å–∏–º–≤–æ–ª–æ–≤</small>
          </div>

          <div className="mb-3">
            <label className="form-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
            <select
                className="form-select"
                value={priority}
                onChange={(e) => setPriority(e.target.value)}
                disabled={loading}
            >
              <option value="">–ù–µ –∑–∞–¥–∞–Ω</option>
              {priorities.map((p) => (
                  <option key={p} value={p}>
                    {priorityLabels[p]}
                  </option>
              ))}
            </select>
          </div>

          <div className="mb-3">
            <label className="form-label">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞</label>
            <select
                className="form-select"
                value={accessStatus}
                onChange={(e) => setAccessStatus(e.target.value)}
                disabled={loading}
            >
              {accessStatusOptions.map((key) => (
                  <option key={key} value={key}>
                    {accessStatusLabels[key]}
                  </option>
              ))}
            </select>
          </div>

          <button type="submit" className="btn btn-primary" disabled={loading}>
            {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'}
          </button>
        </form>

        {message && <div className="alert alert-–£—Å–ø–µ—à–Ω–æ mt-3">{message}</div>}
        {error && <div className="alert alert-danger mt-3">{error}</div>}
      </div>
  );
}

export default CreateTicketForm;
