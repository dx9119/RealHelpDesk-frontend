import React, { useEffect, useState } from 'react';
import axiosInstance from '../../services/axiosInstance';
import dayjs from 'dayjs';

// –¶–≤–µ—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
const getPriorityInfo = (priority) => {
  switch (priority) {
    case 'CRITICAL': return { label: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π', color: 'red' };
    case 'HIGH': return { label: '–í—ã—Å–æ–∫–∏–π', color: 'orange' };
    case 'MEDIUM': return { label: '–°—Ä–µ–¥–Ω–∏–π', color: 'gold' };
    case 'LOW': return { label: '–ù–∏–∑–∫–∏–π', color: 'green' };
    case 'NONE': return { label: '–ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞', color: 'gray' };
    default: return { label: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', color: 'black' };
  }
};

// –¶–≤–µ—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
const getStatusInfo = (status) => {
  switch (status) {
    case 'OPEN': return { label: '–û—Ç–∫—Ä—ã—Ç–∞', color: 'green' };
    case 'IN_PROGRESS': return { label: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', color: 'orange' };
    case 'CLOSED': return { label: '–ó–∞–∫—Ä—ã—Ç–∞', color: 'gray' };
    default: return { label: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', color: 'black' };
  }
};

// –ü–µ—Ä–µ–≤–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞
const accessStatusLabels = {
  ALL_USERS: '–î–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
  CREATOR_AND_PORTAL_USERS: '–¢–æ–ª—å–∫–æ —É –∞–≤—Ç–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Ä—Ç–∞–ª–∞',
};

const PRIORITY_OPTIONS = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'NONE'];
const STATUS_OPTIONS = ['OPEN', 'IN_PROGRESS', 'CLOSED'];

function TicketView({ portalId, ticketId }) {
  const [ticket, setTicket] = useState(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);
  const [changing, setChanging] = useState(false);
  const [message, setMessage] = useState('');
  const [showPriority, setShowPriority] = useState(false);
  const [showStatus, setShowStatus] = useState(false);

  useEffect(() => {
    const fetchTicket = async () => {
      try {
        const response = await axiosInstance.get(
            `/api/v1/portals/${portalId}/ticket/${ticketId}`
        );
        setTicket(response.data);
        setError('');
      } catch (err) {
        const data = err.response?.data;
        if (data?.Error === 'Access Denied' && data?.Source === 'Global handler') {
          setError('‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç–∞–ª—É –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞.');
        } else {
          const msg = data?.–°–æ–æ–±—â–µ–Ω–∏–µ || data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏';
          setError('‚ùå ' + msg);
        }
        setTicket(null);
      } finally {
        setLoading(false);
      }
    };

    if (portalId && ticketId) {
      fetchTicket();
    }
  }, [portalId, ticketId]);

  const handleChange = async (type, value) => {
    setChanging(true);
    setMessage('');

    const endpoint =
        type === 'priority'
            ? `/api/v1/portals/${portalId}/ticket/set/priority/${ticketId}?priority=${value}`
            : `/api/v1/portals/${portalId}/ticket/set/status/${ticketId}?status=${value}`;

    try {
      const response = await axiosInstance.post(endpoint);
      if (response.data === '–£—Å–ø–µ—Ö') {
        setMessage('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        setTicket((prev) => ({
          ...prev,
          ...(type === 'priority' ? { ticketPriority: value } : { ticketStatus: value }),
        }));
      } else {
        setMessage('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å');
      }
    } catch (err) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + (err.response?.data?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setChanging(false);
    }
  };

  if (loading) return <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–∫–∏...</p>;
  if (error) return <p className="alert alert-danger">{error}</p>;

  return (
      <div className="card shadow-sm my-4">
        <div className="card-body">
          <h4 className="card-title mb-3 text-primary">{ticket.title}</h4>

          <div className="row">
            <div className="col-md-6 mb-2">
              <strong>–ü–æ—Ä—Ç–∞–ª:</strong>{' '}
              <span className="text-muted">{ticket.portalName} <small>(ID: {ticket.portalId})</small></span>
            </div>

            <div className="col-md-6 mb-2">
              <strong>ID –∑–∞—è–≤–∫–∏:</strong>{' '}
              <span className="text-muted">{ticket.id}</span>
            </div>

            <div className="col-md-6 mb-2">
              <strong>–ê–≤—Ç–æ—Ä:</strong> {ticket.authorFullName}
            </div>

            <div className="col-md-6 mb-2">
              <strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong>{' '}
              <span style={{
                padding: '0.3rem 0.6rem',
                backgroundColor: getPriorityInfo(ticket.ticketPriority).color,
                color: 'white',
                borderRadius: '5px',
                fontWeight: 'bold'
              }}>
              {getPriorityInfo(ticket.ticketPriority).label}
            </span>
            </div>

            <div className="col-md-6 mb-2">
              <strong>–°—Ç–∞—Ç—É—Å:</strong>{' '}
              <span style={{
                padding: '0.3rem 0.6rem',
                backgroundColor: getStatusInfo(ticket.ticketStatus).color,
                color: 'white',
                borderRadius: '5px',
                fontWeight: 'bold'
              }}>
              {getStatusInfo(ticket.ticketStatus).label}
            </span>
            </div>

            <div className="col-md-6 mb-2">
              <strong>–î–æ—Å—Ç—É–ø –∫ –∑–∞—è–≤–∫–µ:</strong>{' '}
              <span className="text-muted">
              {accessStatusLabels[ticket.ticketAccessStatus] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            </span>
            </div>

            <div className="col-md-6 mb-2">
              <p>
                <strong>–°–æ–∑–¥–∞–Ω–æ:</strong>{' '}
                {dayjs(ticket.createdAt).format('DD.MM.YYYY HH:mm')}
              </p>
            </div>
          </div>

          <div className="mt-4">
            <h5 className="text-secondary">üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:</h5>
            <div className="border rounded p-3 bg-light" style={{ whiteSpace: 'pre-wrap' }}>
              {ticket.body}
            </div>
          </div>

          {/* –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–π –±–ª–æ–∫ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ */}
          <div className="mt-4">
            <h6
                style={{ cursor: 'pointer' }}
                onClick={() => setShowPriority(!showPriority)}
            >
              –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {showPriority ? '‚ñ≤' : '‚ñº'}
            </h6>
            {showPriority && (
                <>
                  {PRIORITY_OPTIONS.map((p) => (
                      <button
                          key={p}
                          className="btn btn-sm me-2 mb-2"
                          style={{ backgroundColor: getPriorityInfo(p).color, color: 'white' }}
                          onClick={() => handleChange('priority', p)}
                          disabled={changing}
                      >
                        {getPriorityInfo(p).label}
                      </button>
                  ))}
                </>
            )}
          </div>

          {/* –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–π –±–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ */}
          <div className="mt-3">
            <h6
                style={{ cursor: 'pointer' }}
                onClick={() => setShowStatus(!showStatus)}
            >
              –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å {showStatus ? '‚ñ≤' : '‚ñº'}
            </h6>
            {showStatus && (
                <>
                  {STATUS_OPTIONS.map((s) => (
                      <button
                          key={s}
                          className="btn btn-sm me-2 mb-2"
                          style={{
                            backgroundColor: getStatusInfo(s).color,
                            color: 'white'
                          }}
                          onClick={() => handleChange('status', s)}
                          disabled={changing}
                      >
                        {getStatusInfo(s).label}
                      </button>
                  ))}
                </>
            )}
          </div>

          {message && <div className="alert alert-info mt-3">{message}</div>}

        </div>
      </div>
  );
}

export default TicketView;
