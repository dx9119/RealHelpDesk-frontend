import React, { useState, useEffect } from "react";
import DatePicker from "react-datepicker";
import { registerLocale } from "react-datepicker";
import ru from "date-fns/locale/ru";
import "react-datepicker/dist/react-datepicker.css";

registerLocale("ru", ru);

function TicketSearchForm({
                              onSearch,
                              loading,
                              error,
                              accessError,
                              noResults,
                              isMyTickets,          // üÜï –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
                              setIsMyTickets        // üÜï –ø–æ–ª—É—á–∞–µ–º setter
                          }) {
    const [searchTerm, setSearchTerm] = useState("");
    const [startDateLocal, setStartDateLocal] = useState(null);
    const [endDateLocal, setEndDateLocal] = useState(null);
    const [ticketStatus, setTicketStatus] = useState("");
    const [ticketPriority, setTicketPriority] = useState("");

    useEffect(() => {
        const filters = JSON.parse(localStorage.getItem("ticketSearchFilters"));
        if (filters) {
            setSearchTerm(filters.searchTerm || "");
            setStartDateLocal(filters.startDate ? new Date(filters.startDate) : null);
            setEndDateLocal(filters.endDate ? new Date(filters.endDate) : null);
            setTicketStatus(filters.ticketStatus || "");
            setTicketPriority(filters.ticketPriority || "");
            setIsMyTickets(filters.isMyTickets || false); // üÜï –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞
        }
    }, [setIsMyTickets]);

    const handleSearch = async () => {
        const now = new Date();
        now.setSeconds(59, 999);
        const defaultStart = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        const start = startDateLocal || defaultStart;
        let end = endDateLocal || now;
        if (endDateLocal) {
            end = new Date(endDateLocal);
            end.setSeconds(59, 999);
        }

        localStorage.setItem("ticketSearchFilters", JSON.stringify({
            searchTerm,
            startDate: startDateLocal ? startDateLocal.getTime() : null,
            endDate: endDateLocal ? endDateLocal.getTime() : null,
            ticketStatus,
            ticketPriority,
            isMyTickets // üÜï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
        }));

        const params = {
            search: searchTerm || undefined,
            startDate: start.toISOString(),
            endDate: end.toISOString(),
            ticketStatus: ticketStatus || undefined,
            ticketPriority: ticketPriority || undefined,
            isMyTickets, // üÜï –ø–µ—Ä–µ–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
            page: 0,
            size: 20,
            sortBy: "createdAt",
            order: "desc"
        };

        onSearch({ params, searchTerm, startDate: startDateLocal, endDate: endDateLocal, ticketStatus, ticketPriority, isMyTickets });
    };

    return (
        <div className="card shadow-sm border-0 mt-4">
            <div className="card-header bg-secondary text-white">
                <strong>–ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∫–∞–º</strong>
            </div>
            <div className="card-body">
                {accessError && (
                    <div className="alert alert-warning">
                        ‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø–æ—Ä—Ç–∞–ª—É. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç–∞–ª –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ—Å—Ç—É–ø —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    </div>
                )}
                {noResults && (
                    <div className="alert alert-warning">
                        üîé –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø–µ—Ä–∏–æ–¥.
                    </div>
                )}
                <div className="mb-3">
                    <label className="form-label">üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É</label>
                    <input
                        type="text"
                        className="form-control"
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –§–ò–û –∞–≤—Ç–æ—Ä–∞... (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)"
                        maxLength={50}
                    />
                </div>
                <div className="row mb-3">
                    <div className="col-md-6">
                        <label className="form-label">üìÜ –° –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏</label>
                        <DatePicker
                            selected={startDateLocal}
                            onChange={(date) => setStartDateLocal(date)}
                            showTimeSelect
                            timeFormat="HH:mm"
                            timeIntervals={15}
                            timeCaption="–í—Ä–µ–º—è"
                            locale="ru"
                            dateFormat="dd.MM.yyyy HH:mm"
                            placeholderText="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"
                            className="form-control"
                        />
                    </div>
                    <div className="col-md-6">
                        <label className="form-label">üìÜ –ü–æ –¥–∞—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–∏</label>
                        <DatePicker
                            selected={endDateLocal}
                            onChange={(date) => setEndDateLocal(date)}
                            showTimeSelect
                            timeFormat="HH:mm"
                            timeIntervals={15}
                            timeCaption="–í—Ä–µ–º—è"
                            locale="ru"
                            dateFormat="dd.MM.yyyy HH:mm"
                            placeholderText="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"
                            className="form-control"
                        />
                    </div>
                </div>
                <div className="row mb-3">
                    <div className="col-md-6">
                        <label className="form-label">üìå –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏</label>
                        <select
                            className="form-select"
                            value={ticketStatus}
                            onChange={(e) => setTicketStatus(e.target.value)}
                        >
                            <option value="">–í—Å–µ</option>
                            <option value="OPEN">–û—Ç–∫—Ä—ã—Ç–∞</option>
                            <option value="IN_PROGRESS">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                            <option value="CLOSED">–ó–∞–∫—Ä—ã—Ç–∞</option>
                        </select>
                    </div>
                    <div className="col-md-6">
                        <label className="form-label">üè∑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                        <select
                            className="form-select"
                            value={ticketPriority}
                            onChange={(e) => setTicketPriority(e.target.value)}
                        >
                            <option value="">–õ—é–±–æ–π</option>
                            <option value="CRITICAL">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                            <option value="HIGH">–í—ã—Å–æ–∫–∏–π</option>
                            <option value="MEDIUM">–°—Ä–µ–¥–Ω–∏–π</option>
                            <option value="LOW">–ù–∏–∑–∫–∏–π</option>
                            <option value="NONE">–ë–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞</option>
                        </select>
                    </div>
                </div>
                <div className="row mb-3">
                    <div className="col-md-12">
                        <div className="form-check d-flex align-items-center">
                            <input
                                type="checkbox"
                                className="form-check-input me-2"
                                id="myTicketsCheck"
                                checked={isMyTickets}
                                onChange={(e) => setIsMyTickets(e.target.checked)}
                            />
                            <label className="form-check-label mb-0" htmlFor="myTicketsCheck">
                                üßë‚Äçüíº –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –º–æ–∏–º –∑–∞—è–≤–∫–∞–º
                            </label>
                        </div>
                    </div>
                </div>

                <button
                    className="btn btn-primary"
                    onClick={handleSearch}
                    disabled={loading}
                >
                    {loading ? "‚è≥ –ü–æ–∏—Å–∫..." : "üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫"}
                </button>
            </div>
            {error && <div className="alert alert-danger">{error}</div>}
        </div>
    );
}

export default TicketSearchForm;
