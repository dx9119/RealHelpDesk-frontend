import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { registerUser } from '../../services/authService';
import { Form, Button, Alert, Container, Card, InputGroup } from 'react-bootstrap';
import CaptchaViewer from '../captcha/CaptchaViewer';

const RegisterPage = () => {
  const navigate = useNavigate();

  const [form, setForm] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    capCode: ''
  });

  const [message, setMessage] = useState(null);
  const [showGenerated, setShowGenerated] = useState(false);
  const [captchaId, setCaptchaId] = useState('');

  const handleCaptchaIdChange = (newId) => {
    setCaptchaId(newId);
    console.log('–¢–µ–∫—É—â–∏–π captchaId:', newId);
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const generatePassword = () => {
    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';
    let password = '';
    for (let i = 0; i < 12; i++) {
      password += charset[Math.floor(Math.random() * charset.length)];
    }
    setForm({ ...form, password });
    setShowGenerated(true);
  };

  const togglePasswordVisibility = () => {
    setShowGenerated(!showGenerated);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!captchaId || !form.capCode.trim()) {
      setMessage({ type: 'danger', text: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ CAPTCHA.' });
      return;
    }

    const { firstName, lastName, email, password, capCode } = form;

    try {
      const response = await registerUser({ firstName, lastName, email, password, capCode }, captchaId);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ email
      const emailFailed =
          response?.message?.toLowerCase().includes('–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email') ||
          response?.emailSent === false;

      setMessage({
        type: 'success',
        text: emailFailed
            ? '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–∏—Å—å–º–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤—Ä—É—á–Ω—É—é.'
            : response.message || '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
      });

      setTimeout(() => {
        navigate('/');
      }, 1500);
    } catch (error) {
      const errorMsg = error?.response?.data?.message;

      if (errorMsg === '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email') {
        setMessage({
          type: 'warning',
          text: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–∏—Å—å–º–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤—Ä—É—á–Ω—É—é.'
        });

        setTimeout(() => {
          navigate('/');
        }, 1500);
      } else {
        setForm((prevForm) => ({
          ...prevForm,
          capCode: ''
        }));

        setMessage({ type: 'danger', text: errorMsg || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
      }
    }
  };

  return (
      <Container className="mt-5">
        <Card className="mb-4 border-warning">
          <Card.Header className="bg-warning text-dark">
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ¬´–ó–∞—è–≤—É—Å¬ª.
          </Card.Header>
          <Card.Body>
            <ul>
              <li>üö´ –í–∞–∂–Ω–æ: –Ω–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –∏ email!</li>
              <li>üõ† –¶–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.</li>
              <li>üìâ –í–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è.</li>
            </ul>
          </Card.Body>
        </Card>

        <CaptchaViewer onCaptchaIdChange={handleCaptchaIdChange} />

        <Form.Control
            name="capCode"
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏"
            value={form.capCode}
            onChange={handleChange}
            className="mb-3"
        />

        {message && <Alert variant={message.type}>{message.text}</Alert>}

        <Form onSubmit={handleSubmit}>
          <Form.Control
              name="firstName"
              placeholder="–ò–º—è"
              value={form.firstName}
              onChange={handleChange}
              className="mb-2"
          />
          <Form.Control
              name="lastName"
              placeholder="–§–∞–º–∏–ª–∏—è"
              value={form.lastName}
              onChange={handleChange}
              className="mb-2"
          />
          <Form.Control
              name="email"
              type="email"
              placeholder="Email"
              value={form.email}
              onChange={handleChange}
              className="mb-2"
          />

          <InputGroup className="mb-2">
            <Form.Control
                name="password"
                type={showGenerated ? 'text' : 'password'}
                placeholder="–ü–∞—Ä–æ–ª—å (–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å)"
                value={form.password}
                onChange={handleChange}
            />
            <Button variant="outline-secondary" onClick={generatePassword}>
              üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            </Button>
            <Button variant="outline-secondary" onClick={togglePasswordVisibility}>
              {showGenerated ? 'üôà –°–∫—Ä—ã—Ç—å' : 'üëÅ –ü–æ–∫–∞–∑–∞—Ç—å'}
            </Button>
          </InputGroup>

          <Button type="submit" variant="primary">
            –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ
          </Button>
        </Form>
      </Container>
  );
};

export default RegisterPage;
