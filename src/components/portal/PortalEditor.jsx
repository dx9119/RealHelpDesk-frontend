import { useEffect, useState } from 'react';
import axiosInstance from '../../services/axiosInstance';
import 'bootstrap/dist/css/bootstrap.min.css';

const PortalEditor = ({ portalId }) => {
    const [formData, setFormData] = useState({ name: '', description: '' });
    const [loading, setLoading] = useState(false);
    const [isPublic, setIsPublic] = useState(false);
    const [statusMessage, setStatusMessage] = useState('');

    useEffect(() => {
        const fetchPortalData = async () => {
            try {
                const response = await axiosInstance.get(`/api/v1/portals/info/${portalId}`);
                setFormData({
                    name: response.data.namePortal || '',
                    description: response.data.description || ''
                });
            } catch {
                setStatusMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª–∞.');
            }
        };

        const fetchPortalStatus = async () => {
            try {
                const response = await axiosInstance.get(`/api/v1/portals/shared/${portalId}/status`);
                setIsPublic(response.data);
            } catch {
                setStatusMessage('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏.');
            }
        };

        fetchPortalData();
        fetchPortalStatus();
    }, [portalId]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const validateForm = () => {
        const errors = [];

        if (!formData.name.trim()) {
            errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
        } else if (formData.name.length > 255) {
            errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤.');
        }

        if (formData.description.length > 2500) {
            errors.push('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 2500 —Å–∏–º–≤–æ–ª–æ–≤.');
        }

        return errors;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setStatusMessage('');

        const validationErrors = validateForm();
        if (validationErrors.length > 0) {
            setStatusMessage(validationErrors.map((err, i) => <div key={i}>‚ùå {err}</div>));
            setLoading(false);
            return;
        }

        try {
            const response = await axiosInstance.post(
                `/api/v1/portals/info/update/${portalId}`,
                formData,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );
            setFormData({
                name: response.data.namePortal,
                description: response.data.description
            });
            setStatusMessage('‚úÖ –ü–æ—Ä—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.');
        } catch {
            setStatusMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞.');
        } finally {
            setLoading(false);
        }
    };

    const togglePortalStatus = async () => {
        try {
            await axiosInstance.post(`/api/v1/portals/shared/${portalId}/status?isPublic=${!isPublic}`);
            setIsPublic(!isPublic);
            setStatusMessage(`üì¢ –°—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞–ª–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: —Ç–µ–ø–µ—Ä—å –æ–Ω ${!isPublic ? '–ø—É–±–ª–∏—á–Ω—ã–π' : '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π'}.`);
        } catch {
            setStatusMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏.');
        }
    };

    return (
        <div className="container mt-4">
            <h2 className="mb-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞</h2>

            {/* üîÑ –ë–ª–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ */}
            <div className="card mb-4 p-3 border">
                <h5>–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç–∞–ª—É</h5>
                <div className="form-check form-switch mt-2">
                    <input
                        className="form-check-input"
                        type="checkbox"
                        role="switch"
                        id="publicSwitch"
                        checked={isPublic}
                        onChange={togglePortalStatus}
                    />
                    <label className="form-check-label" htmlFor="publicSwitch">
                        {isPublic ? '–ü–æ—Ä—Ç–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π' : '–ü–æ—Ä—Ç–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π'}
                    </label>
                </div>
                <small className="text-muted d-block mt-2">
                    üí° –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—É–±–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç–∞–ª–∞ –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤ –µ–≥–æ —Ä–∞–º–∫–∞—Ö –∑–∞—è–≤–∫–∏.
                </small>
            </div>

            {/* üìã –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
            <form onSubmit={handleSubmit} className="card p-4 shadow-sm">
                <div className="mb-3">
                    <label htmlFor="name" className="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–∞</label>
                    <input
                        type="text"
                        className="form-control"
                        id="name"
                        name="name"
                        value={formData.name}
                        onChange={handleChange}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                    />
                </div>

                <div className="mb-3">
                    <label htmlFor="description" className="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                    <textarea
                        className="form-control"
                        id="description"
                        name="description"
                        value={formData.description}
                        onChange={handleChange}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                        rows="4"
                    />
                </div>

                <button type="submit" className="btn btn-primary" disabled={loading}>
                    {loading ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                </button>

                {statusMessage && <div className="mt-3 alert alert-info">{statusMessage}</div>}
            </form>
        </div>
    );
};

export default PortalEditor;
