import { useCallback, useEffect, useState } from 'react';
import axiosInstance from '../../services/axiosInstance';

const ID_REGEX = /^[0-9a-fA-F\-]{36}$/;
const ITEMS_PER_PAGE = 10;

function CopyButton({ textToCopy }) {
    const [copied, setCopied] = useState(false);

    const handleCopy = () => {
        navigator.clipboard.writeText(textToCopy).then(() => {
            setCopied(true);
            setTimeout(() => setCopied(false), 2000);
        });
    };

    return (
        <button
            className={`btn btn-sm ${copied ? 'btn-success' : 'btn-outline-primary'}`}
            onClick={handleCopy}
            title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID"
        >
            {copied ? '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ' : 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID'}
        </button>
    );
}

function UnifiedPortalUserEditor({ portalId }) {
    const [tagInput, setTagInput] = useState('');
    const [tags, setTags] = useState([]);
    const [loadedUsers, setLoadedUsers] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [responseMsg, setResponseMsg] = useState('');
    const [currentPage, setCurrentPage] = useState(1);
    const [loading, setLoading] = useState(true);
    const [invalidIDs, setInvalidIDs] = useState([]);
    const [submitting, setSubmitting] = useState(false);

    // –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è GET —Å cache-busting –∏ no-cache
    const getUsers = useCallback(async () => {
        const url = `/api/v1/portals/shared/${portalId}`;
        const res = await axiosInstance.get(url, {
            params: { _: Date.now() },
            headers: {
                'Cache-Control': 'no-cache',
                Pragma: 'no-cache',
            },
        });
        return res.data?.users || [];
    }, [portalId]);

    const fetchUsers = useCallback(async () => {
        setLoading(true);
        try {
            const currentUsers = await getUsers();
            setLoadedUsers(currentUsers);
            setTags(currentUsers.map(u => u.id));
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
            setResponseMsg('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        } finally {
            setLoading(false);
        }
    }, [getUsers]);

    useEffect(() => {
        fetchUsers();
    }, [fetchUsers]);

    const filteredUsers = loadedUsers.filter(user =>
        `${user.lastName} ${user.firstName} ${user.middleName || ''}`.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.id.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const totalPages = Math.ceil(filteredUsers.length / ITEMS_PER_PAGE);
    const displayedUsers = filteredUsers.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE);

    const addTag = () => {
        const raw = tagInput.trim();
        if (!raw) return;

        const splitIds = raw.split(',').map(id => id.trim()).filter(Boolean);
        const newValid = splitIds.filter(id => ID_REGEX.test(id) && !tags.includes(id));
        const newInvalid = splitIds.filter(id => !ID_REGEX.test(id) && !invalidIDs.includes(id));

        setTags(prev => [...prev, ...newValid]);
        setInvalidIDs(prev => [...prev, ...newInvalid]);
        setTagInput('');
    };

    const removeTag = (id) => {
        setTags(prev => prev.filter(tag => tag !== id));
        setInvalidIDs(prev => prev.filter(tag => tag !== id));
    };

    const sleep = (ms) => new Promise(r => setTimeout(r, ms));

    // –ü–æ–ª–ª–∏–Ω–≥ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞ –±—ç–∫–µ (–º–∞–∫—Å 10 —Å–µ–∫—É–Ω–¥)
    const pollUntilUpdated = useCallback(async (expectedIds, timeoutMs = 10000, intervalMs = 800) => {
        const expected = [...expectedIds].sort();
        const deadline = Date.now() + timeoutMs;

        while (Date.now() < deadline) {
            try {
                const users = await getUsers();
                const ids = users.map(u => u.id).sort();
                if (ids.length === expected.length && ids.every((v, i) => v === expected[i])) {
                    setLoadedUsers(users);
                    setTags(ids);
                    return true;
                }
            } catch (_) {
                // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            }
            await sleep(intervalMs);
        }
        return false;
    }, [getUsers]);

    const handleSubmit = async () => {
        setSubmitting(true);
        setResponseMsg('‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        try {
            const res = await axiosInstance.post(`/api/v1/portals/shared/${portalId}/users`, {
                newAccessUserId: tags
            });

            const success =
                res.data === '–£—Å–ø–µ—à–Ω–æ' ||
                res.data?.message === '–£—Å–ø–µ—à–Ω–æ' ||
                (typeof res.data === 'string' && res.data.toLowerCase().includes('—É—Å–ø–µ—à–Ω–æ'));

            if (success) {
                setResponseMsg(tags.length > 0
                    ? '‚úÖ –î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω'
                    : '‚úÖ –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã'
                );

                // –¥–∞—ë–º –±—ç–∫—É ¬´–¥–æ–ø–∏—Å–∞—Ç—å¬ª –∏ –∂–¥—ë–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                const updated = await pollUntilUpdated(tags);
                if (!updated) {
                    await fetchUsers(); // —Ñ–æ–ª–ª–±–µ–∫
                }

                setInvalidIDs([]);
                setCurrentPage(1);

                // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∏–º–µ–Ω–Ω–æ ¬´–∂—ë—Å—Ç–∫–∞—è¬ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –æ–∫–Ω–∞:
                // window.location.href = window.location.href;
            } else {
                setResponseMsg(`‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(res.data)}`);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞:', err);
            setResponseMsg('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        } finally {
            setSubmitting(false);
            window.location.href = window.location.href;
        }
    };

    const copyAllIDs = () => {
        const allIDs = loadedUsers.map(user => user.id).join(', ');
        navigator.clipboard.writeText(allIDs);
        setResponseMsg('‚úÖ –í—Å–µ ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä');
    };

    return (
        <div className="mt-4">
            <h4>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Ä—Ç–∞–ª–∞</h4>

            <input
                type="text"
                className="form-control mb-2"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –§–ò–û, email, ID..."
                value={searchTerm}
                onChange={e => setSearchTerm(e.target.value)}
            />

            {loading ? (
                <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</p>
            ) : (
                <>
                    <ul className="list-group mb-3">
                        {displayedUsers.map(user => (
                            <li
                                key={user.id}
                                className="list-group-item d-flex justify-content-between align-items-start flex-column flex-md-row"
                            >
                                <div>
                                    <strong>üë§</strong> {user.lastName} {user.firstName} {user.middleName || ''}<br />
                                    <strong>üìß</strong> {user.email}<br />
                                    <strong>ID:</strong> <code>{user.id}</code>
                                </div>
                                <CopyButton textToCopy={user.id} />
                            </li>
                        ))}
                    </ul>

                    {totalPages > 1 && (
                        <nav>
                            <ul className="pagination">
                                {[...Array(totalPages).keys()].map(i => (
                                    <li key={i} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                                        <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                                            {i + 1}
                                        </button>
                                    </li>
                                ))}
                            </ul>
                        </nav>
                    )}
                </>
            )}

            <div className="my-4">
                <button className="btn btn-outline-secondary" onClick={copyAllIDs}>
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ ID
                </button>
            </div>

            <label htmlFor="tagEditor" className="form-label">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ ID:</label>

            <div className="mb-3">
                <div className="d-flex flex-wrap gap-2">
                    {tags.map(id => {
                        const user = loadedUsers.find(u => u.id === id);
                        const label = user
                            ? `${id} (${user.lastName} ${user.firstName}${user.middleName ? ' ' + user.middleName : ''})`
                            : id;

                        return (
                            <span key={id} className={`badge bg-${invalidIDs.includes(id) ? 'danger' : 'primary'} p-2`}>
                {label}
                                <button
                                    className="btn-close btn-close-white btn-sm ms-1"
                                    onClick={() => removeTag(id)}
                                    title="–£–¥–∞–ª–∏—Ç—å"
                                />
              </span>
                        );
                    })}
                </div>

                <div className="input-group mt-2">
                    <input
                        id="tagEditor"
                        type="text"
                        className="form-control"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                        value={tagInput}
                        onChange={(e) => setTagInput(e.target.value)}
                        onKeyDown={(e) => {
                            if (e.key === 'Enter') {
                                e.preventDefault();
                                addTag();
                            }
                        }}
                    />
                    <button className="btn btn-outline-success" onClick={addTag}>
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å ID
                    </button>
                </div>
            </div>

            {invalidIDs.length > 0 && (
                <div className="text-danger mb-2">
                    ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID: {invalidIDs.join(', ')}
                </div>
            )}

            <button className="btn btn-success" onClick={handleSubmit} disabled={submitting}>
                {submitting ? 'üíæ –°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø'}
            </button>

            <small className="text-muted d-block mt-2">
                üí° –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ ID, –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å ID", –∑–∞—Ç–µ–º "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø".
            </small>

            {responseMsg && (
                <div className="alert alert-info mt-3">{responseMsg}</div>
            )}
        </div>
    );
}

export default UnifiedPortalUserEditor;
