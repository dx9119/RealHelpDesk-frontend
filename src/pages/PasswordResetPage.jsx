import React, { useState } from "react";
import Header from "../pages/Header";
import Footer from "../pages/Footer";
import axiosInstance from "../services/axiosInstance";
import { Link, useLocation, useNavigate } from "react-router-dom";

function PasswordResetPage() {
    const location = useLocation();
    const navigate = useNavigate();
    const queryParams = new URLSearchParams(location.search);
    const resetCode = queryParams.get("code");

    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [showGenerated, setShowGenerated] = useState(false);
    const [statusMessage, setStatusMessage] = useState("");
    const [errorMessage, setErrorMessage] = useState("");
    const [loading, setLoading] = useState(false);

    const generatePassword = () => {
        const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
        let generated = "";
        for (let i = 0; i < 12; i++) {
            generated += charset.charAt(Math.floor(Math.random() * charset.length));
        }
        setPassword(generated);
        setConfirmPassword(generated);
        setShowGenerated(true);
    };

    const handleEmailSubmit = async (e) => {
        e.preventDefault();
        setStatusMessage("");
        setErrorMessage("");
        setLoading(true);

        try {
            const response = await axiosInstance.post("/api/v1/user/passwd-reset/request", {
                email
            });

            const —Å–æ–æ–±—â–µ–Ω–∏–µ = response.data?.["–°–æ–æ–±—â–µ–Ω–∏–µ"];
            const —Å—Ç–∞—Ç—É—Å = response.data?.["–°—Ç–∞—Ç—É—Å"];

            if (—Å–æ–æ–±—â–µ–Ω–∏–µ?.includes("–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç")) {
                setErrorMessage("üö´ –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.");
            } else if (—Å—Ç–∞—Ç—É—Å === "–£—Å–ø–µ—Ö") {
                setStatusMessage("üìß –ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.");
            } else {
                setErrorMessage("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        } catch (err) {
            const errorMessageFromServer = err.response?.data?.["–°–æ–æ–±—â–µ–Ω–∏–µ"];

            if (errorMessageFromServer?.includes("–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç")) {
                setErrorMessage("üö´ –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.");
            } else {
                setErrorMessage("‚ùå –£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }

            console.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:", err);
        } finally {
            setLoading(false);
        }
    };

    const handlePasswordSubmit = async (e) => {
        e.preventDefault();
        setStatusMessage("");
        setErrorMessage("");
        setLoading(true);

        if (password !== confirmPassword) {
            setErrorMessage("‚ùó –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
            setLoading(false);
            return;
        }

        try {
            const response = await axiosInstance.post(`/api/v1/user/passwd-reset/confirm?code=${resetCode}`, {
                password
            });

            if (response.data?.["–°—Ç–∞—Ç—É—Å"] === "–£—Å–ø–µ—Ö") {
                setStatusMessage("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω. –°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...");
                setTimeout(() => {
                    navigate("/login");
                }, 2000);
            } else {
                setErrorMessage("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è:", err);
            setErrorMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="d-flex flex-column min-vh-100">
            <Header />
            <main className="flex-grow-1 d-flex align-items-center justify-content-center bg-light">
                <div className="container">
                    {!resetCode ? (
                        <div className="alert alert-info mb-4" role="alert">
                            <h5 className="text-center mb-3">üîê –ö–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</h5>
                            <ul className="mb-2">
                                <li>–í–≤–µ–¥–∏—Ç–µ <strong>–∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã</strong> –≤ –ø–æ–ª–µ –Ω–∏–∂–µ.</li>
                                <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <strong>"–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è"</strong>.</li>
                                <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É ‚Äî –ø—Ä–∏–¥–µ—Ç –ø–∏—Å—å–º–æ —Å <strong>—Å—Å—ã–ª–∫–æ–π –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è</strong>.</li>
                                <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.</li>
                            </ul>
                            <p className="text-center mb-0">
                                –ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚Äî –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ{" "}
                                <Link to="/register" className="alert-link">—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</Link>.
                            </p>
                        </div>
                    ) : (
                        <div className="alert alert-info mb-4 text-center" role="alert">
                            üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å.
                        </div>
                    )}

                    <div className="row justify-content-center">
                        <div className="col-md-6">
                            <div className="card shadow">
                                <div className="card-body">
                                    {statusMessage && (
                                        <div className="alert alert-success text-center" role="alert">
                                            {statusMessage}
                                        </div>
                                    )}
                                    {errorMessage && (
                                        <div className="alert alert-danger text-center" role="alert">
                                            {errorMessage}
                                        </div>
                                    )}

                                    {!resetCode ? (
                                        <form onSubmit={handleEmailSubmit}>
                                            <div className="mb-3">
                                                <label htmlFor="email" className="form-label">Email</label>
                                                <input
                                                    type="email"
                                                    className="form-control"
                                                    id="email"
                                                    value={email}
                                                    onChange={(e) => setEmail(e.target.value)}
                                                    required
                                                />
                                            </div>
                                            <button
                                                type="submit"
                                                className="btn btn-primary w-100"
                                                disabled={loading}
                                            >
                                                {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è"}
                                            </button>
                                        </form>
                                    ) : (
                                        <form onSubmit={handlePasswordSubmit}>
                                            <div className="mb-3">
                                                <label htmlFor="password" className="form-label">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</label>
                                                <input
                                                    type={showGenerated ? "text" : "password"}
                                                    className="form-control"
                                                    id="password"
                                                    value={password}
                                                    onChange={(e) => setPassword(e.target.value)}
                                                    required
                                                />
                                            </div>
                                            <div className="mb-3">
                                                <label htmlFor="confirmPassword" className="form-label">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                                                <input
                                                    type={showGenerated ? "text" : "password"}
                                                    className="form-control"
                                                    id="confirmPassword"
                                                    value={confirmPassword}
                                                    onChange={(e) => setConfirmPassword(e.target.value)}
                                                    required
                                                />
                                            </div>
                                            <div className="d-flex justify-content-between mb-3">
                                                <button
                                                    type="button"
                                                    className="btn btn-secondary"
                                                    onClick={generatePassword}
                                                >
                                                    üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
                                                </button>
                                                <button
                                                    type="submit"
                                                    className="btn btn-primary"
                                                    disabled={loading}
                                                >
                                                    {loading ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"}
                                                </button>
                                            </div>
                                        </form>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
            <Footer />
        </div>
    );
}

export default PasswordResetPage;
